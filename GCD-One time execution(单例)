20191002

StoryBoard中添加一个View ->baseView
任意位置 添加
约束设置 ：宽 高14 居上居左居右
宽 约束 还要来链接到 .m文件 ->baseViewWidth  为了动态更改宽度

确认：ImageView icon的显示情况

- (void)viewDidLoad {


    [super viewDidLoad];

    self.baseView.layer.borderColor = [[UIColor darkGrayColor] CGColor];

    [self.baseView.layer setMasksToBounds:YES];

    self.baseView.layer.borderWidth = 0.5;

    self.baseView.layer.cornerRadius = 2;

    NSString *str = @"天将我命dddddddddddddddd顶顶顶顶";

    CGRect tempRect = [str boundingRectWithSize:
                       CGSizeMake([UIScreen mainScreen].bounds.size.width - 40,2000)
                                        options:NSStringDrawingUsesLineFragmentOrigin
                                     attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]}
                                        context:nil];

    UILabel * label = [[UILabel alloc] initWithFrame:CGRectMake(20, 0, tempRect.size.width, self.baseView.frame.size.height)];

    label.text = str;

    label.font = [UIFont systemFontOfSize:10];
//    label.adjustsFontSizeToFitWidth = YES;
//    label.backgroundColor = [UIColor redColor];
//    [label sizeToFit];
    label.numberOfLines = 0;
    [self.baseView addSubview:label];

    self.baseViewWidth.constant = label.bounds.size.width + 24;

    UIImageView * image = [[UIImageView alloc] initWithFrame:CGRectMake(4, 0, 14, self.baseView.frame.size.height)];
    image.backgroundColor = [UIColor redColor];

    image.image = [UIImage imageNamed:@"mdks"];;

    [self.baseView addSubview:image];

}


------------------------------------------------------------------------------------------------------------------
20190912

    NSLog(@"-------yIN==%f", [self degreesStringToDecimal:@"35°28'26.3\"N"]);
    
    NSLog(@"----=[%f]", [self degreesStringToDecimal:@"139°36'52.7\"E"]);
    
//    -19.267047, 133.182922   19°16'01.4"S 133°10'58.5"E
    
    NSLog(@"---[%f]", [self degreesStringToDecimal:@"19°16'01.4\"S"]);
    
    NSLog(@"----=[%f]", [self degreesStringToDecimal:@"133°10'58.5\"E"]);
    
}

- (double)degreesStringToDecimal:(NSString*)string
{
    // split the string
    NSArray *splitDegs = [string componentsSeparatedByString:@"\u00B0"];  // unicode for degree symbol
    NSArray *splitMins = [splitDegs[1] componentsSeparatedByString:@"'"];
    NSArray *splitSecs = [splitMins[1] componentsSeparatedByString:@"\""];
    
    // get each segment of the dms string
    NSString *degreesString = splitDegs[0];
    NSString *minutesString = splitMins[0];
    NSString *secondsString = splitSecs[0];
    NSString *direction = splitSecs[1];
    
    // convert degrees
    double degrees = [degreesString doubleValue];
    
    // convert minutes
    double minutes = [minutesString doubleValue] / 60;  // 60 degrees in a minute
    
    // convert seconds
    double seconds = [secondsString doubleValue] / 3600; // 60 seconds in a minute, or 3600 in a degree
    
    // add them all together
    double decimal = degrees + minutes + seconds;
    
    // determine if this is negative. south and west would be negative values
    if ([direction.uppercaseString isEqualToString:@"W"] || [direction.uppercaseString isEqualToString:@"S"])
    {
        decimal = -decimal;
    }
    
    return decimal;
}





+++++++++++++++++++++++======================++++++++++++++==============++++++++++++++===========++++++==
有的时候，在程序开发中，有些代码只想从程序启动就只执行一次，典型的应用场景就是“单例”

例如：
    // MARK: 一次性执行
  - (void)once {
    static dispatch_once_t onceToken;
    NSLog(@"%ld", onceToken);

    dispatch_once(&onceToken, ^{
        [NSThread sleepForTimeInterval:1.0];
        NSLog(@"一次性吗?");
    });
    NSLog(@"come here");
}

dispatch 内部也有一把锁，是能够保证"线程安全"的！而且是苹果公司推荐使用的。
以下代码用于测试多线程的一次性执行：
- (void)demoOnce {
    for (int i = 0; i < 10; ++i) {
        dispatch_async(dispatch_get_global_queue(0, 0), ^{
            [self once];
        });
    }
}

上面说过，一次性执行最常用到的场景是单例，
单例的特点：
  在内存中只有一个实例；
  提供一个全局的访问点

// 使用 dispatch_once 实现单例
static id _instance;
//单例的实现
+ (instancetype)sharedMusicManager{
    if (_instance){
        return _instance;
    }
    _instance = [[self alloc] init];
    return _instance;
    
}

//[alloc] init 方法会调用 allocWithZone
+ (instancetype)allocWithZone:(struct _NSZone *)zone{
    static dispatch_once_t onceToken;
    //系统提供的, 官方建议实现单例就用这种方式
    //dispatch_once 这个方法是线程安全
    dispatch_once(&onceToken, ^{
        _instance = [super allocWithZone:zone];
    });
    return _instance;
}

@end

